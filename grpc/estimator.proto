// Copyright 2023 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package estimator;

service Estimator {
  // Initialize Estimator
  rpc Init(InitRequest) returns (InitResponse);
  // Set Estimator data
  rpc SetData(SetDataRequest) returns (SetDataResponse);
  // Get Estimator data
  rpc GetData(GetDataRequest) returns (GetDataResponse);
  // Set Estimator settings
  rpc SetSettings(SetSettingsRequest) returns (SetSettingsResponse);
  // Get Estimator settings
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse);
  // Get Estimator costs
  rpc GetCosts(GetCostsRequest) returns (GetCostsResponse);
  // Set Estimator weights
  rpc SetWeights(SetWeightsRequest) returns (SetWeightsResponse);
  // Get Estimator weights
  rpc GetWeights(GetWeightsRequest) returns (GetWeightsResponse);
  // Shift Estimator trajectories
  rpc ShiftTrajectories(ShiftTrajectoriesRequest) returns (ShiftTrajectoriesResponse);
  // Reset Estimator
  rpc Reset(ResetRequest) returns (ResetResponse);
  // Optimize Estimator
  rpc Optimize(OptimizeRequest) returns (OptimizeResponse);
  // Get Estimator status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

message MjModel {
  optional bytes mjb = 1;
  optional string xml = 2;
}

message InitRequest {
  optional MjModel model = 1;
  optional int32 configuration_length = 2;
}

message InitResponse {}

message Data {
  repeated double configuration = 1 [packed = true];
  repeated double velocity = 2 [packed = true];
  repeated double acceleration = 3 [packed = true];
  repeated double action = 4 [packed = true];
  repeated double time = 5 [packed = true];
  repeated double configuration_prior = 6 [packed = true];
  repeated double sensor_measurement = 7 [packed = true];
  repeated double sensor_prediction = 8 [packed = true];
  repeated double force_measurement = 9 [packed = true];
  repeated double force_prediction = 10 [packed = true];
}

message SetDataRequest {
  int32 index = 1;
  Data data = 2;
}

message SetDataResponse {}

message GetDataRequest {
  int32 index = 1;
}

message GetDataResponse {
  Data data = 1;
}

message Settings {
  optional int32 configuration_length = 1;
  optional int32 search_type = 2;
  optional bool prior_flag = 3;
  optional bool sensor_flag = 4;
  optional bool force_flag = 5;
  optional int32 smoother_iterations = 6;
}

message SetSettingsRequest {
  Settings settings = 1;
}

message SetSettingsResponse {}

message GetSettingsRequest {}

message GetSettingsResponse {
  Settings settings = 1;
}

message Cost {
  optional double total = 1;
  optional double prior = 2;
  optional double sensor = 3;
  optional double force = 4;
  optional double initial = 5;
}

message GetCostsRequest {}

message GetCostsResponse {
  Cost cost = 1;
}

message Weight {
  optional double prior = 1;
  repeated double sensor = 2 [packed = true];
  repeated double force = 3 [packed = true];
}

message SetWeightsRequest {
  Weight weight = 1;
}

message SetWeightsResponse {}

message GetWeightsRequest {}

message GetWeightsResponse {
  Weight weight = 1;
}

message ShiftTrajectoriesRequest {
  int32 shift = 1;
}

message ShiftTrajectoriesResponse {
  int32 head = 1;
}

message ResetRequest {}

message ResetResponse {}

message OptimizeRequest {}

message OptimizeResponse {}

message Status {
  int32 search_iterations = 1;
  int32 smoother_iterations = 2;
  double step_size = 3;
  double regularization = 4;
  double gradient_norm = 5;
}

message GetStatusRequest {
}

message GetStatusResponse {
  Status status = 1;
}
